// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// med_ian
double med_ian(const arma::vec& vec_tor);
RcppExport SEXP _NPE_med_ian(SEXP vec_torSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vec_tor(vec_torSEXP);
    rcpp_result_gen = Rcpp::wrap(med_ian(vec_tor));
    return rcpp_result_gen;
END_RCPP
}
// rolling_median
arma::vec rolling_median(NumericVector vec_tor, int look_back);
RcppExport SEXP _NPE_rolling_median(SEXP vec_torSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec_tor(vec_torSEXP);
    Rcpp::traits::input_parameter< int >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(rolling_median(vec_tor, look_back));
    return rcpp_result_gen;
END_RCPP
}
// medianAbsoluteDeviation
double medianAbsoluteDeviation(arma::vec& vec_tor);
RcppExport SEXP _NPE_medianAbsoluteDeviation(SEXP vec_torSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type vec_tor(vec_torSEXP);
    rcpp_result_gen = Rcpp::wrap(medianAbsoluteDeviation(vec_tor));
    return rcpp_result_gen;
END_RCPP
}
// rolling_mad
arma::vec rolling_mad(NumericVector vec_tor, int look_back);
RcppExport SEXP _NPE_rolling_mad(SEXP vec_torSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec_tor(vec_torSEXP);
    Rcpp::traits::input_parameter< int >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(rolling_mad(vec_tor, look_back));
    return rcpp_result_gen;
END_RCPP
}
// hle
double hle(NumericVector vec_tor);
RcppExport SEXP _NPE_hle(SEXP vec_torSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec_tor(vec_torSEXP);
    rcpp_result_gen = Rcpp::wrap(hle(vec_tor));
    return rcpp_result_gen;
END_RCPP
}
// TheilSenEstimator
NumericVector TheilSenEstimator(arma::vec x, arma::vec y);
RcppExport SEXP _NPE_TheilSenEstimator(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(TheilSenEstimator(x, y));
    return rcpp_result_gen;
END_RCPP
}
// calc_pca
arma::mat calc_pca(arma::mat& mat_rix);
RcppExport SEXP _NPE_calc_pca(SEXP mat_rixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type mat_rix(mat_rixSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_pca(mat_rix));
    return rcpp_result_gen;
END_RCPP
}
// calc_ranksWithTies
arma::vec calc_ranksWithTies(NumericVector vec_tor);
RcppExport SEXP _NPE_calc_ranksWithTies(SEXP vec_torSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec_tor(vec_torSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ranksWithTies(vec_tor));
    return rcpp_result_gen;
END_RCPP
}
// WilcoxanSignedRankTest
double WilcoxanSignedRankTest(arma::vec& x, const double& mu, const std::string& alternative, bool exact, const bool correct);
RcppExport SEXP _NPE_WilcoxanSignedRankTest(SEXP xSEXP, SEXP muSEXP, SEXP alternativeSEXP, SEXP exactSEXP, SEXP correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< bool >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< const bool >::type correct(correctSEXP);
    rcpp_result_gen = Rcpp::wrap(WilcoxanSignedRankTest(x, mu, alternative, exact, correct));
    return rcpp_result_gen;
END_RCPP
}
// WilcoxanMannWhitneyTest
double WilcoxanMannWhitneyTest(arma::vec& x, const arma::vec& y, const double& mu, const std::string& alternative, bool exact, const bool correct);
RcppExport SEXP _NPE_WilcoxanMannWhitneyTest(SEXP xSEXP, SEXP ySEXP, SEXP muSEXP, SEXP alternativeSEXP, SEXP exactSEXP, SEXP correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< bool >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< const bool >::type correct(correctSEXP);
    rcpp_result_gen = Rcpp::wrap(WilcoxanMannWhitneyTest(x, y, mu, alternative, exact, correct));
    return rcpp_result_gen;
END_RCPP
}
// KruskalWalliceTest
double KruskalWalliceTest(List x);
RcppExport SEXP _NPE_KruskalWalliceTest(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(KruskalWalliceTest(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NPE_med_ian", (DL_FUNC) &_NPE_med_ian, 1},
    {"_NPE_rolling_median", (DL_FUNC) &_NPE_rolling_median, 2},
    {"_NPE_medianAbsoluteDeviation", (DL_FUNC) &_NPE_medianAbsoluteDeviation, 1},
    {"_NPE_rolling_mad", (DL_FUNC) &_NPE_rolling_mad, 2},
    {"_NPE_hle", (DL_FUNC) &_NPE_hle, 1},
    {"_NPE_TheilSenEstimator", (DL_FUNC) &_NPE_TheilSenEstimator, 2},
    {"_NPE_calc_pca", (DL_FUNC) &_NPE_calc_pca, 1},
    {"_NPE_calc_ranksWithTies", (DL_FUNC) &_NPE_calc_ranksWithTies, 1},
    {"_NPE_WilcoxanSignedRankTest", (DL_FUNC) &_NPE_WilcoxanSignedRankTest, 5},
    {"_NPE_WilcoxanMannWhitneyTest", (DL_FUNC) &_NPE_WilcoxanMannWhitneyTest, 6},
    {"_NPE_KruskalWalliceTest", (DL_FUNC) &_NPE_KruskalWalliceTest, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_NPE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
