tail(port_folio)
port_folio$portfolio_val[1]
head(port_folio)
Principle <- port_folio$portfolio_val[1]
VaR_95 <- -1.65*Principle*portfolio_vol
VaR_95
VaR(portf_rets, method = "gaussian", p=0.95)
VaR(portf_rets, method = "gaussian", p=0.95)*Principle
VaR(portf_rets, method = "historical", p=0.95)*Principle
VaR(port_folio$portfolio_val, method = "historical", p=0.95)
VaR(port_folio$portfolio_val[2:], method = "historical", p=0.95)
VaR(portf_rets, method = "historical", p=0.95)*Principle
8083/(sqrt(252))
portfolio_rets <- round(diff(log(port_folio$portfolio_val)), 5)
portf_rets
portfolio_rets <- round(diff((port_folio$portfolio_val)), 5)
portfolio_rets <- round(diff((port_folio$portfolio_val)), 5)
portf_rets
portfolio_rets <- round(diff((port_folio$portfolio_val)), 5)
portf_rets
portfolio_rets
VaR(portfolio_rets, method = "historical", p=0.95)*Principle
VaR(portfolio_rets, method = "gaussian", p=0.95)*Principle
portfolio_rets <- round(diff(log(port_folio$portfolio_val)), 5)
VaR(portfolio_rets, method = "gaussian", p=0.95)*Principle
VaR(portfolio_rets, method = "historical", p=0.95)*Principle
order(portfolio_rets)
colnames(port_folio) <- c("ABI", "ABI_put75", "ABI_put65", "AAPL", "XAU", "US10YT")
port_folio$portfolio_val <- 150*port_folio$ABI + 80*port_folio$ABI_put75 + 70*port_folio$ABI_put65 + 75*port_folio$AAPL + 35*port_folio$XAU + 25*port_folio$US10YT
portfolio_rets <- round(diff((port_folio$portfolio_val)), 5)
portfolio_rets <- as.numeric(portfolio_rets)
portfolio_vol <- sd.annualized(portfolio_rets, na.rm = TRUE, scale=252)
hist_v <- portf_rets[order(portfolio_val)]
hist_v <- portf_rets[order(portfolio_rets)]
hist_v
hist_v <- portfolio_rets [order(portfolio_rets)]
hist_v
hist_v <- portfolio_rets [order(-portfolio_rets)]
portfolio_rets <- round(diff(log(port_folio$portfolio_val)), 5)
portfolio_rets <- as.numeric(portfolio_rets)
portfolio_vol <- sd.annualized(portfolio_rets, na.rm = TRUE, scale=252)
hist_v <- portfolio_rets [order(-portfolio_rets)]
n <- round(nrow(portfolio_rets)*0.05)
hist_var<- hist_v[n]
n
nrow(portfolio_rets)
portfolio_rets
nrow(portfolio_rets, na.rm = TRUE)
length(portfolio_rets)
hist_v <- portfolio_rets [order(-portfolio_rets)]
n <- round(length(portfolio_rets)*0.05)
hist_var<- hist_v[n]
hist_var
hist_var*Principle
hist_v[1:n]
es <- mean(hist_v[1:n])*Principle
es
# Load the XTS library
library(xts)
library(PerformanceAnalytics)
library(quantmod)
# Change locale to english
Sys.setlocale(locale = "English_United States.1252")
# Import data from CSV files using read.csv(). Look up the parameters stringsAsFactors and header. Use fileEncoding 'UTF-8-BOM'.
AAPL <- read.csv("E:\\Summer term\\var and es\\AAPL.csv", header = FALSE, stringsAsFactors = FALSE, fileEncoding = "UTF-8-BOM")
ABI.BR <- read.csv("E:\\Summer term\\var and es\\ABI.BR.csv", header = FALSE, stringsAsFactors = FALSE, fileEncoding = "UTF-8-BOM")
XAU <- read.csv("E:\\Summer term\\var and es\\XAU.csv", header = FALSE, stringsAsFactors = FALSE, fileEncoding = "UTF-8-BOM")
USD_EUR <- read.csv("E:\\Summer term\\var and es\\USD-EUR.csv", header = FALSE, stringsAsFactors = FALSE, fileEncoding = "UTF-8-BOM")
US10YT <- read.csv("E:\\Summer term\\var and es\\US10YT.csv", header = FALSE, stringsAsFactors = FALSE, fileEncoding = "UTF-8-BOM")
to_xts <- function(df){
dates <-lapply(df[1], function(x) as.Date(x, "%d-%b-%y"))
xts(df[2], order.by = dates$V1)
}
USD_EUR_xts <- to_xts(USD_EUR)
AAPL_xts <- to_xts(AAPL)/USD_EUR_xts
XAU_xts <- to_xts(XAU)/USD_EUR_xts
US10YT_xts <- to_xts(US10YT)/USD_EUR_xts
ABI_xts <- to_xts(ABI.BR)
# Compute Put option prices using Black-Scholes formula.
price_put <- function(S, K, r, sigma, mat) {
d1 <- (log(S/K) + (r + (sigma^2/2)) * mat) / (sigma * sqrt(mat))
d2 <- d1 - sigma * sqrt(mat)
(K * exp(-r*(mat)) * pnorm(-d2)) - (S * pnorm(-d1))
}
ABI_returns <- c('NA', round(diff(log(ABI.BR_xts)), 5))
ABI_returns <- as.numeric(ABI_returns)
ABI_sd <- sd.annualized(ABI_returns, na.rm = TRUE, scale = 252)
rf <-  0.005
expiry <- as.Date("20-sep-19", format = "%d-%b-%y")
ABI_put75 <- round(price_put(ABI_xts, 75, rf, ABI_sd, as.numeric(expiry-index(ABI_xts))/252 ),2)
ABI_put65 <- round(price_put(ABI_xts, 65, rf, ABI_sd, as.numeric(expiry-index(ABI_xts))/252 ),2)
#Take prices of alla assets on same dates.
port_folio <- Reduce(function(x,y) merge(x, y, all = FALSE), list(ABI_xts, ABI_put75, ABI_put65, AAPL_xts , XAU_xts, US10YT_xts))[-1,]
colnames(port_folio) <- c("ABI", "ABI_put75", "ABI_put65", "AAPL", "XAU", "US10YT")
#Calculate portfolio value on each day
port_folio$portfolio_val <- 150*port_folio$ABI + 80*port_folio$ABI_put75 + 70*port_folio$ABI_put65 + 75*port_folio$AAPL + 35*port_folio$XAU + 25*port_folio$US10YT
Principle <- port_folio$portfolio_val[1]
#Calculate Portfolio retuns for every day.
portfolio_rets <- round(diff(log(port_folio$portfolio_val)), 5)
portfolio_rets <- as.numeric(portfolio_rets)
#Calculate Historic VaR at 95% confidence interval.
hist_v <- portfolio_rets [order(-portfolio_rets)]
n <- round(length(portfolio_rets)*0.05)
hist_var<- hist_v[n]
#Calculate Expected shortfall at 95 % confidence interval.
es <- mean(hist_v[1:n])*Principle
#Calculate VaR by variance- covariance method.
portfolio_vol <- sd.annualized(portfolio_rets, na.rm = TRUE, scale=252)
VaR_95 <- -1.65*Principle*portfolio_vol
hist_var
hist_var<- hist_v[n]*Principle
hist_var
es
VaR_95
VaR_95 <- -1.65*Principle*portfolio_vol/sqrt(252)
VaR_95
print("Daily Historical VaR (95%) : ", hist_var)
cat("Daily Historical VaR (95%) : ", hist_var)
hist_v
#Calculate Historic VaR at 95% confidence interval.
hist_v <- portfolio_rets [order(portfolio_rets)]
n <- round(length(portfolio_rets)*0.05)
hist_var<- hist_v[n]*Principle
#Calculate Expected shortfall at 95 % confidence interval.
es <- mean(hist_v[1:n])*Principle
#Calculate VaR by variance- covariance method.
portfolio_vol <- sd.annualized(portfolio_rets, na.rm = TRUE, scale=252)
VaR_95 <- -1.65*Principle*portfolio_vol/sqrt(252)
cat("Daily Historical VaR (95%) : ", hist_var)
cat("Daily Historical VaR (95%) : ", hist_var)
cat("Daily Expected Shortfall (95%) : ", es)
cat("Daily VaR by Covariance-variance method (95%) : ", VaR_95)
install.packages("BH")
install.packages("C:\Users\sumit\AppData\Local\Temp\RtmpwHiptd\downloaded_packages")
install.packages("C:\Users\sumit\AppData\Local\Temp\RtmpwHiptd\downloaded_packages", repos=NULL, type="source")
install.packages("C:\Users\sumit\AppData\Local\Temp\RtmpwHiptd\downloaded_packages\BH_1.72.0-3.zip", repos=NULL, type="source")
install.packages("C:\\Users\\sumit\\AppData\\Local\\Temp\\RtmpwHiptd\\downloaded_packages\\BH_1.72.0-3.zip", repos=NULL, type="source")
library(BH)
a <- 6
a <- 6
b <- 15
cat( c(computeGCD(a,b), computeLCM(a,b)), "\n")
library(Rcpp)
library(BH)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
library(Rcpp)
library(BH)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
a <- 6
b <- 15
cat( c(computeGCD(a,b), computeLCM(a,b)), "\n")
install.Rtools(TRUE)
install.Rtools(TRUE)
install.Rtools(TRUE)
Sys.which(make)
Sys.which("make")
Sys.which("make")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(Rcpp)
library(BH)
library(microbenchmark)
x <- runif(n = 10, min = -100000, max = 100000)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
medianAbsoluteDeviation(x)
median(abs(x - median(x)))
mad(x, constant = 1)
microbenchmark::microbenchmark(medianAbsoluteDeviation(x), mad(x, constant = 1), check = 'identical')
x <- 1:20
w <- runif(20)
x
w
weighted_median(x, w)
weighted.median(x, w)
median(rep(x, times = w))
median(rep(x, times = w))
x
w
library(isotone)
library(matrixStats)
matrixStats::weightedMedian(x, w)
weighted_median(x, w)
matrixStats::weightedMedian(x, w)
library(Rcpp)
library(BH)
library(microbenchmark)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
w <- runif(20)
weighted_median(x, w)
microbenchmark::microbenchmark(weighted_median(x, w), weighted.median(x, w))
library(matrixStats)
weightedMedian(x, w)
w
sum(w[1:10])
sum(w[12:20])
w[11]
sum(w[1:10])/sum(w)
sum(w[12:20])/sum(w)
sum(w[1:9])/sum(w)
sum(w[10:20])/sum(w)
library(Rcpp)
library(BH)
library(microbenchmark)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
w <- runif(20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- 1:20
#w <- runif(20)
w <- rep(0.05, 20)
weighted_median(x, w)
library(matrixStats)
weightedMedian(x, w)
weighted_median_sumit(x, w)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
x <- c(17, 20, 170, 315, 22, 190, 64 )
y <- c(22, 29, 13, 16, 15, 18, 14, 6)
WMW(x, y)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
x <- c(17, 20, 170, 315, 22, 190, 64 )
y <- c(22, 29, 13, 16, 15, 18, 14, 6)
WMW(x, y)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
x <- c(17, 20, 170, 315, 22, 190, 64 )
y <- c(22, 29, 13, 16, 15, 18, 14, 6)
getRank(x, y)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
x <- c(17, 20, 170, 315, 22, 190, 64 )
y <- c(22, 29, 13, 16, 15, 18, 14, 6)
getRank(x, y)
WMW(x,y)
WMW(y,x)
rank(x, ties.method = "average")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
#x <- c(17, 20, 170, 315, 22, 190, 64 )
y <- c(22, 29, 13, 16, 15, 18, 14, 6)
x <- c(3, 4, 2, 6, 2, 5 )
y <- c(9, 7, 5, 10, 6, 8)
getRank(x, y)
WMW(x,y)
WMW(y,x)
getRank(y,x)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
x <- c(3, 4, 2, 6, 2, 5 )
y <- c(9, 7, 5, 10, 6, 8)
getRank(x, y)
WMW(x,y)
WMW(y,x)
rank(x, ties.method = "average")
rank(x, ties.method = "average")
x <- c(3, 4, 2, 6, 2, 5, 2 )
rank(x, ties.method = "average")
x <- c(3, 4, 2, 6, 2, 5, 2 )
rank(x, ties.method = "average")
x <- c(3, 4, 2, 6, 2, 5 )
rank(x, ties.method = "average")
?pwilcox
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\WMW.cpp")
x <- c(3, 4, 2, 6, 2, 5 )
y <- c(9, 7, 5, 10, 6, 8)
getRank(x, y)
WMW(x,y)
?wilcox.test
x <- c(3, 4, 2, 6, 11, 5 )
y <- c(9, 7, 1, 10, 12, 8)
getRank(x, y)
WMW(x,y)
wilcox.test(x, y, alternative = "two.sided")
microbenchmark::microbenchmark(WMW(x,y), wilcox.test(x, y, alternative = "two.sided"))
#x <- c(17, 20, 170, 315, 22, 190, 64 )
z <- c(22, 29, 13, 16, 15, 18, 14, 16)
rank(z)
r <- rank(z)
table(r)
sum(ties)
ties<- table(r)
sum(ties)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
x <- runif(n = 10, min = -100000, max = 100000)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
summary(microbenchmark( rcpp=rcpp_median(x),
mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
library(microbenchmark)
x <- runif(n = 10, min = -100000, max = 100000)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
summary(microbenchmark( rcpp=rcpp_median(x),
mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
summary(microbenchmark( rcpp=rcpp_median(x),
mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
summary(microbenchmark( rcpp=rcpp_median(x),
mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
summary(microbenchmark( rcpp=rcpp_median(x),
mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
summary(microbenchmark( rcpp=rcpp_median(x),
mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
medianAbsoluteDeviation(x)
x <- 1:20
medianAbsoluteDeviation(x)
x <- 1:20
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
medianAbsoluteDeviation(x)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
medianAbsoluteDeviation(x)
Rcpp::sourceCpp(file = "E:\\Summer term\\project\\Mad.cpp")
summary(microbenchmark( mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
summary(microbenchmark( mycode=med_ian(x),
r=median(x),
times=10))[, c(1, 4, 5)]
library("HighFreq")
?HighFreq::diff_vec
library("NPE")
x<-1:10
NPE::med_ian(x)
Sys.getenv("PATH")
library(NPE)
remove.packages("NPE", lib="~/R/win-library/3.6")
library(devtools)
devtools::install_github(repo = "marvic24/Non-Parametric-Estimators")
devtools::install_github(repo = "marvic24/Non-Parametric-Estimators")
devtools::install_github(repo = "marvic24/Non-Parametric-Estimators")
setwd("E:\\Summer term\\project")
library(devtools)
install()
setwd("E:\\Summer term\\project\\NPE")
install()
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
library(microbenchmark)
library("NPE")
#Rcpp::sourceCpp(file = "E:\\Summer term\\project\\NPE\\src\\Estimators.cpp")
x <- rnorm(1e2)
#Benchmark for calculating median - RCpp code vs R code.
summary(microbenchmark(
rcpp=NPE::med_ian(x),
rcode=median(x),
times=10))[, c(1, 4, 5)]
#Benchmark for calculating median - RCpp code vs R code.
summary(microbenchmark(
rcpp=NPE::med_ian(x),
rcode=median(x),
times=10))[, c(1, 4, 5)]
remove.packages("NPE", lib="~/R/win-library/3.6")
